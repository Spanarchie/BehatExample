<?php

use Behat\Behat\Context\ClosuredContextInterface,
    Behat\Behat\Context\TranslatedContextInterface,
    Behat\Behat\Context\BehatContext,
    Behat\Behat\Exception\PendingException;
use Behat\Gherkin\Node\PyStringNode,
    Behat\Gherkin\Node\TableNode;

use GuzzleHttp\Client;

//
// Require 3rd-party libraries here:
//
require_once 'PHPUnit/Autoload.php';
require_once 'PHPUnit/Framework/Assert/Functions.php';
//

/**
 * Features context.
 */
class XmlContext extends BehatContext
{
	//Xpaths for Service Api
    public function getServiceId()
    {
        return $this->dom->ProgramDescription->ServiceInformationTable->ServiceInformation[0]->getAttribute('serviceId');
    } 

	public function getName()
    {
        return $this->dom->ProgramDescription->ServiceInformationTable->ServiceInformation[0]->Name;
    } 

    public function getOwner()
    {
        return $this->dom->ProgramDescription->ServiceInformationTable->ServiceInformation[0]->Owner;
    } 

    public function getServiceURL()
    {
        return $this->dom->ProgramDescription->ServiceInformationTable->ServiceInformation[0]->ServiceURL;
    } 

	
    /**
     * Initializes context.
     * Every scenario gets its own context object.
     *
     * @param array $parameters context parameters (set them up through behat.yml)
     */
    public function __construct(array $parameters)
    {
        // Initialize your context here
    }

	/**
     * @Given /^I request a specific xml service$/
     */
    public function iRequestASpecificXmlService()
    {
        //  Send request for specific Service
	    $url = "http://172.28.128.17/app_dev.php/v0/services?nid=1";
		$client = new Client();
		$client->setDefaultOption('headers', array(
			    'Accept' => 'headapplication/vnd.fvc.v0+xml,application/vnd.fvc.v1+xml,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
		));
		$this->responseService = $client->get($url);
		$this->dom = $this->responseService->xml();
		//print_r($this->dom);
    }	

	/**
     * @When /^I perform a specific xpath$/
     */
    public function iPerformASpecificXpath()
    {
		$this->resultName = $this->getName();
		$this->resultOwner = $this->getOwner();
		$this->resultServiceId = $this->getServiceId();
		$this->resultServiceURL = $this->getServiceURL();
		
	}

	/**
     * @Then /^I verify it is as expected$/
     */
    public function iVerifyItIsAsExpected()
    {	
		assertEquals("Service A", $this->resultName );
		assertEquals("Channel7 Ltd.", $this->resultOwner );
		assertEquals("dvb://233a..3039", $this->resultServiceURL );
		assertEquals("12345", $this->resultServiceId );	
	}



  

}
