<?php

use Behat\Behat\Context\ClosuredContextInterface,
    Behat\Behat\Context\TranslatedContextInterface,
    Behat\Behat\Context\BehatContext,
    Behat\Behat\Exception\PendingException;
use Behat\Gherkin\Node\PyStringNode,
    Behat\Gherkin\Node\TableNode;

//
// Require 3rd-party libraries here:
//
//   require_once 'PHPUnit/Autoload.php';
//   require_once 'PHPUnit/Framework/Assert/Functions.php';
//

/**
 * Features context.
 */
class FeatureContext extends BehatContext
{
    private $expectedXMLresp = '<?xml version="1.0"?><resource xmlns:xlink="http://www.w3.org/1999/xlink">
        <CUSTOMERList xlink:href="http://www.thomas-bayer.com/sqlrest/CUSTOMER/">CUSTOMER</CUSTOMERList>
        <INVOICEList xlink:href="http://www.thomas-bayer.com/sqlrest/INVOICE/">INVOICE</INVOICEList>
        <ITEMList xlink:href="http://www.thomas-bayer.com/sqlrest/ITEM/">ITEM</ITEMList>
        <PRODUCTList xlink:href="http://www.thomas-bayer.com/sqlrest/PRODUCT/">PRODUCT</PRODUCTList>
        </resource>';

    /**
     * Initializes context.
     * Every scenario gets its own context object.
     *
     * @param array $parameters context parameters (set them up through behat.yml)
     */
    public function __construct(array $parameters)
    {
        // Initialize your context here
    }

    /**
     * @Given /^I am using the SeaChange device$/
     */
    public function iAmUsingTheSeachangeDevice()
    {
        throw new PendingException();
    }

    /**
     * @Given /^I am using a client device$/
     */
    public function iAmUsingAClientDevice()
    {
        $this->w = 1 + 1;
    }


    /**
     * @When /^I request a specific episodes by ref$/
     */
    public function iRequestASpecificEpisodesByRef()
    {
        //  Send request for specific Episode
	    $url = "http://www.thomas-bayer.com/sqlrest/";
	    $this->response = file_get_contents($url);
	    var_dump($this->response);
    }



    /**
     * @Then /^I should see the expected result$/
     */
    public function iShouldSeeTheFileName()
    {
        // Verify that the response is as expected
	    $this->expectedXMLresp == $this->response;
    }

    /**
     * @When /^I request all episodes of a series$/
     */
    public function iRequestAllEpisodesOfASeries()
    {
        throw new PendingException();
    }

    /**
     * @Given /^for the "([^"]*)" Series$/
     */
    public function forTheSeries($seriesNo)
    {
        $seriesNo == "#";
    }

    /**
     * @Given /^for the known brand$/
     */
    public function forTheKnownBrand()
    {
        throw new PendingException();
    }

    /**
     * @Then /^I should see the expected results$/
     */
    public function iShouldSeeTheExpectedResults()
    {
        throw new PendingException();
    }

    /**
     * @When /^I request all episodes of brand$/
     */
    public function iRequestAllEpisodesOfBrand()
    {
        throw new PendingException();
    }



}
